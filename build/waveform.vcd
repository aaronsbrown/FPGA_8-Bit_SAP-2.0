$date
	Sun Apr 20 09:34:58 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module alu_tb $end
$var wire 1 ! dut_zero_flag $end
$var wire 1 " dut_negative_flag $end
$var wire 8 # dut_latched_result [7:0] $end
$var wire 1 $ dut_carry_flag $end
$var parameter 32 % arch_defs_pkg_DATA_WIDTH $end
$var reg 1 & clk $end
$var reg 1 ' reset $end
$var reg 8 ( tb_a_in [7:0] $end
$var reg 2 ) tb_alu_op [1:0] $end
$var reg 8 * tb_b_in [7:0] $end
$scope module uut $end
$var wire 8 + a_in [7:0] $end
$var wire 2 , alu_op [1:0] $end
$var wire 8 - b_in [7:0] $end
$var wire 1 $ carry_flag $end
$var wire 1 & clk $end
$var wire 1 ' reset $end
$var wire 1 ! zero_flag $end
$var wire 1 " negative_flag $end
$var parameter 32 . arch_defs_pkg_DATA_WIDTH $end
$var reg 1 / _sv2v_0 $end
$var reg 9 0 comb_arith_result_i [8:0] $end
$var reg 1 1 comb_carry_out_i $end
$var reg 8 2 comb_result_final_i [7:0] $end
$var reg 8 3 comp_logic_result_i [7:0] $end
$var reg 8 4 latched_result [7:0] $end
$upscope $end
$scope task apply_and_check $end
$var reg 8 5 a [7:0] $end
$var reg 8 6 b [7:0] $end
$var reg 1 7 exp_c $end
$var reg 1 8 exp_n $end
$var reg 8 9 exp_result [7:0] $end
$var reg 1 : exp_z $end
$var reg 2 ; op [1:0] $end
$upscope $end
$scope task test_utils_pkg_pretty_print_assert_vec $end
$var reg 32 < actual [31:0] $end
$var reg 32 = expected [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000 .
b1000 %
$end
#0
$dumpvars
bx =
bx <
bx ;
x:
bx 9
x8
x7
bx 6
bx 5
bx 4
b0 3
b0 2
01
b0 0
0/
bx -
bx ,
bx +
bx *
bx )
bx (
1'
0&
0$
bx #
0"
1!
$end
#5000
b0 #
b0 4
1&
#6000
b0 =
b0 <
#10000
0'
0&
#15000
1&
#16000
08
0:
07
b1000 9
b0 ;
b11 6
b101 5
#20000
0!
b1000 2
b1000 0
b0 )
b0 ,
b11 *
b11 -
b101 (
b101 +
0&
#25000
b1000 #
b1000 4
1&
#26000
1:
b0 9
b0 6
b0 5
b0 =
b0 <
#30000
1!
b0 2
b0 0
b0 *
b0 -
b0 (
b0 +
0&
#35000
b0 #
b0 4
1&
#36000
17
b1 6
b11111111 5
b0 =
b0 <
#40000
1$
11
b100000000 0
b1 *
b1 -
b11111111 (
b11111111 +
0&
#45000
1&
#46000
18
0:
07
b10000001 9
b10000000 5
b0 =
b0 <
#50000
1"
0!
b10000001 2
0$
01
b10000001 0
b10000000 (
b10000000 +
0&
#55000
b10000001 #
b10000001 4
1&
#56000
b10000000 9
b1111111 5
b1 =
b1 <
#60000
0!
b10000000 2
b10000000 0
b1111111 (
b1111111 +
0&
#65000
b10000000 #
b10000000 4
1&
#66000
17
b11100000 9
b11110000 6
b11110000 5
b1 =
b1 <
#70000
1$
11
0!
b11100000 2
b111100000 0
b11110000 *
b11110000 -
b11110000 (
b11110000 +
0&
#75000
b11100000 #
b11100000 4
1&
#76000
08
b101 9
b1 ;
b11 6
b1000 5
b1 =
b1 <
#80000
0"
0!
b101 2
1$
11
b100000101 0
b1 )
b1 ,
b11 *
b11 -
b1000 (
b1000 +
0&
#85000
b101 #
b101 4
1&
#86000
1:
b0 9
b101 6
b101 5
b0 =
b0 <
#90000
1!
b0 2
1$
11
b100000000 0
b101 *
b101 -
b101 (
b101 +
0&
#95000
b0 #
b0 4
1&
#96000
18
0:
07
b11111110 9
b11 5
b0 =
b0 <
#100000
1"
0!
b11111110 2
0$
01
b11111110 0
b11 (
b11 +
0&
#105000
b11111110 #
b11111110 4
1&
#106000
b11111111 9
b1 6
b0 5
b1 =
b1 <
#110000
0!
b11111111 2
b11111111 0
b1 *
b1 -
b0 (
b0 +
0&
#115000
b11111111 #
b11111111 4
1&
#116000
08
17
b1111111 9
b10000000 5
b1 =
b1 <
#120000
0"
1$
11
0!
b1111111 2
b101111111 0
b10000000 (
b10000000 +
0&
#125000
b1111111 #
b1111111 4
1&
#126000
1:
07
b0 9
b10 ;
b10101010 6
b1010101 5
b0 =
b0 <
#130000
1!
b0 2
0$
01
b0 0
b10 )
b10 ,
b10101010 *
b10101010 -
b1010101 (
b1010101 +
0&
#135000
b0 #
b0 4
1&
#136000
18
0:
b11001101 9
b11111111 6
b11001101 5
b0 =
b0 <
#140000
1"
0!
b11001101 2
b11001101 3
b11111111 *
b11111111 -
b11001101 (
b11001101 +
0&
#145000
b11001101 #
b11001101 4
1&
#146000
08
b1101 9
b1111 6
b1 =
b1 <
#150000
0"
0!
b1101 2
b1101 3
b1111 *
b1111 -
0&
#155000
b1101 #
b1101 4
1&
#156000
1:
b0 9
b11110000 5
b0 =
b0 <
#160000
1!
b0 2
b0 3
b11110000 (
b11110000 +
0&
#165000
b0 #
b0 4
1&
#166000
18
0:
b11111111 9
b11 ;
b10101010 6
b1010101 5
b0 =
b0 <
#170000
1"
0!
b11111111 2
b11111111 3
b11 )
b11 ,
b10101010 *
b10101010 -
b1010101 (
b1010101 +
0&
#175000
b11111111 #
b11111111 4
1&
#176000
b11001101 9
b0 6
b11001101 5
b1 =
b1 <
#180000
0!
b11001101 2
b11001101 3
b0 *
b0 -
b11001101 (
b11001101 +
0&
#185000
b11001101 #
b11001101 4
1&
#186000
08
b1111 9
b1111 5
b1 =
b1 <
#190000
0"
0!
b1111 2
b1111 3
b1111 (
b1111 +
0&
#195000
b1111 #
b1111 4
1&
#196000
18
b11111111 9
b1111 6
b11110000 5
b0 =
b0 <
#200000
1"
0!
b11111111 2
b11111111 3
b1111 *
b1111 -
b11110000 (
b11110000 +
0&
#205000
b11111111 #
b11111111 4
1&
#206000
b1 =
b1 <
#210000
0&
#215000
1&
