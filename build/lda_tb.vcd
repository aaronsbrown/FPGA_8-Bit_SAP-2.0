$date
	Fri Apr  4 16:31:16 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module lda_tb $end
$var wire 8 ! out_val [7:0] $end
$var wire 2 " cpu_flags [1:0] $end
$var parameter 32 # test_utils_pkg_RAM_SIZE_BYTES $end
$var reg 1 $ clk $end
$var reg 128 % prog [127:0] $end
$var reg 1 & reset $end
$scope module uut $end
$var wire 1 $ clk $end
$var wire 8 ' out_val [7:0] $end
$var wire 1 & reset $end
$var wire 8 ( ram_out [7:0] $end
$var wire 1 ) pc_enable $end
$var wire 4 * operand [3:0] $end
$var wire 4 + opcode [3:0] $end
$var wire 1 , oe_ram $end
$var wire 1 - oe_pc $end
$var wire 1 . oe_ir $end
$var wire 1 / oe_alu $end
$var wire 1 0 oe_a $end
$var wire 8 1 o_out [7:0] $end
$var wire 4 2 memory_address_out [3:0] $end
$var wire 1 3 load_ram $end
$var wire 1 4 load_pc $end
$var wire 1 5 load_o $end
$var wire 1 6 load_mar $end
$var wire 1 7 load_ir $end
$var wire 1 8 load_b $end
$var wire 1 9 load_a $end
$var wire 1 : halt $end
$var wire 1 ; flag_zero $end
$var wire 1 < flag_carry $end
$var wire 2 = cpu_flags [1:0] $end
$var wire 4 > counter_out [3:0] $end
$var wire 8 ? bus [7:0] $end
$var wire 8 @ b_out [7:0] $end
$var wire 8 A alu_out [7:0] $end
$var wire 2 B alu_op [1:0] $end
$var wire 8 C a_out [7:0] $end
$var reg 1 D _sv2v_0 $end
$var reg 20 E control_word [19:0] $end
$var reg 3 F current_state [2:0] $end
$var reg 4 G current_step [3:0] $end
$var reg 20 H next_control_word [19:0] $end
$var reg 3 I next_state [2:0] $end
$var reg 4 J next_step [3:0] $end
$scope module u_alu $end
$var wire 2 K alu_op [1:0] $end
$var wire 1 $ clk $end
$var wire 1 & reset $end
$var wire 8 L b_in [7:0] $end
$var wire 8 M a_in [7:0] $end
$var reg 1 < carry_flag $end
$var reg 1 N negative_flag $end
$var reg 8 O result_out [7:0] $end
$var reg 1 ; zero_flag $end
$upscope $end
$scope module u_output_register $end
$var wire 1 $ clk $end
$var wire 8 P data_in [7:0] $end
$var wire 1 5 load $end
$var wire 1 & reset $end
$var parameter 32 Q N $end
$var reg 8 R latched_data [7:0] $end
$upscope $end
$scope module u_program_counter $end
$var wire 1 $ clk $end
$var wire 4 S counter_in [3:0] $end
$var wire 1 ) enable $end
$var wire 1 4 load $end
$var wire 1 & reset $end
$var parameter 32 T ADDR_WIDTH $end
$var reg 4 U counter_out [3:0] $end
$upscope $end
$scope module u_ram $end
$var wire 1 $ clk $end
$var wire 8 V data_in [7:0] $end
$var wire 1 3 we $end
$var wire 4 W address [3:0] $end
$var reg 8 X data_out [7:0] $end
$var reg 128 Y ram [127:0] $end
$var integer 32 Z i [31:0] $end
$upscope $end
$scope module u_register_A $end
$var wire 1 $ clk $end
$var wire 8 [ data_in [7:0] $end
$var wire 1 9 load $end
$var wire 1 & reset $end
$var parameter 32 \ N $end
$var reg 8 ] latched_data [7:0] $end
$upscope $end
$scope module u_register_B $end
$var wire 1 $ clk $end
$var wire 8 ^ data_in [7:0] $end
$var wire 1 8 load $end
$var wire 1 & reset $end
$var parameter 32 _ N $end
$var reg 8 ` latched_data [7:0] $end
$upscope $end
$scope module u_register_instr $end
$var wire 1 $ clk $end
$var wire 8 a data_in [7:0] $end
$var wire 1 7 load $end
$var wire 1 & reset $end
$var wire 4 b operand [3:0] $end
$var wire 4 c opcode [3:0] $end
$var reg 8 d instruction [7:0] $end
$upscope $end
$scope module u_register_memory_address $end
$var wire 1 $ clk $end
$var wire 4 e data_in [3:0] $end
$var wire 1 6 load $end
$var wire 1 & reset $end
$var parameter 32 f N $end
$var reg 4 g latched_data [3:0] $end
$upscope $end
$scope begin sv2v_autoblock_1 $end
$var reg 32 h i [31:0] $end
$scope begin sv2v_autoblock_2 $end
$var reg 32 i s [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope task test_utils_pkg_clear_ram $end
$var reg 32 j end_addr [31:0] $end
$var reg 32 k i [31:0] $end
$var reg 32 l start_addr [31:0] $end
$upscope $end
$scope task test_utils_pkg_inspect_register $end
$var reg 8 m actual [7:0] $end
$var reg 8 n expected [7:0] $end
$var reg 1024 o name [1023:0] $end
$upscope $end
$scope task test_utils_pkg_load_program $end
$var reg 32 p i [31:0] $end
$var reg 128 q program_data [127:0] $end
$var reg 32 r program_size [31:0] $end
$var reg 32 s start_addr [31:0] $end
$upscope $end
$scope task test_utils_pkg_pretty_print_assert_vec $end
$var reg 32 t actual [31:0] $end
$var reg 32 u expected [31:0] $end
$var reg 1024 v msg [1023:0] $end
$upscope $end
$scope task test_utils_pkg_reset_and_wait $end
$var reg 32 w cycles [31:0] $end
$upscope $end
$scope task test_utils_pkg_run_until_halt $end
$var reg 32 x cycle [31:0] $end
$var reg 32 y max_cycles [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100 f
b1000 _
b1000 \
b100 T
b1000 Q
b10000 #
$end
#0
$dumpvars
bx y
bx x
b10 w
bx v
bx u
bx t
b0 s
b11 r
b10000001011111111xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx q
b11 p
bx o
bx n
bx m
b0 l
b10000 k
b1111 j
b1000 i
b10000 h
bx g
b0 e
bx d
bx c
bx b
b0 a
bx `
b0 ^
bx ]
b0 [
b10000 Z
b11111010011101110000010000110111000001001000000000000000000000000000000000000000000000000000000000000000000001000000000000101 Y
bx X
bx W
b0 V
bx U
b0 S
bx R
b0 P
b0 O
xN
bx M
bx L
b0 K
bx J
b1 I
b0 H
bx G
b0 F
b0 E
0D
bx C
b0 B
b0 A
bx @
b0 ?
bx >
b0 =
0<
0;
0:
09
08
07
06
05
04
03
bx 2
bx 1
00
0/
0.
0-
0,
bx +
bx *
0)
bx (
bx '
1&
b10000001011111111xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx %
0$
b0 "
bx !
$end
#5000
b10 I
b1000000000000000 H
0N
1;
bx1 "
bx1 =
x<
bx A
bx O
b1 F
0&
1$
#10000
0$
#15000
bx e
bx S
b0xxxx ?
b0xxxx P
b0xxxx V
b0xxxx [
b0xxxx ^
b0xxxx a
1-
b11 I
b1001000000000000 H
xN
bx "
bx =
x;
b1000000000000000 E
b10 F
1$
#20000
0$
#25000
16
b100 I
b10000000000 H
b1001000000000000 E
b11 F
b0 x
b110010 y
1$
#30000
0$
#35000
bx ?
bx P
bx V
bx [
bx ^
bx a
06
0-
1,
b110 I
b100100010000000000 H
b10000000000 E
b100 F
b1 x
1$
#40000
0$
#45000
17
1)
b101 I
b0 H
b100100010000000000 E
b110 F
b10 x
1$
#50000
0$
#55000
b0 e
b0 S
b0 ?
b0 P
b0 V
b0 [
b0 ^
b0 a
07
0,
0)
bx H
b0 E
b101 F
b11 x
1$
#60000
0$
#65000
bx e
bx S
bx ?
bx P
bx V
bx [
bx ^
bx a
x5
x9
x8
x7
x4
x6
x3
x0
x.
x-
x/
x,
bx B
bx K
x)
x:
bx E
b100 x
1$
#70000
0$
#75000
b0x "
b0x =
0<
b0 A
b0 O
b1000001001000000111001001100101011001110110100101110011011101000110010101110010001000000110001101101000011001010110001101101011 v
b10101011 u
b0xxxxxxxx t
b1000001 o
b10101011 n
b101 x
1$
